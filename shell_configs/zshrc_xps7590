# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/spencer/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/spencer/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/spencer/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/spencer/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/spencer/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
export TERM="xterm-256color"
alias ptt="ssh bbsu@ptt.cc"
export LC_ALL="C.UTF-8"
export LANG="C.UTF-8"
export CUDACXX="/usr/local/cuda/bin/nvcc"
mysql-restore() {
# first arg: absolute path of local backup directory
# second arg: gz filename under local backup directory,
        docker run --env-file=.env  \
                        --rm \
                        -v $1:/backup \
                        -e DB_RESTORE_TARGET=/backup/$2 \
                        -e DB_DUMP_DEBUG=true \
                        -e DB_SERVER=mysqlmaster \
                        --name=mysql_restore \
                        --network=container:mysqlmaster \
                        deitch/mysql-backup:d3bd5f5b4e6043ec9695688cf545c6494bf23dc5
}

# Elmo
alias run_docker_server="docker-compose run --service-ports -v /Users/spencer/proj/elmo-ai/control_detection:/home/elmo/src elmo"
alias elmo_gui="docker-compose run --service-ports -e DISPLAY=192.168.99.1:0 elmo"

alias ssl-elmo="ssh -L 127.0.0.1:6006:127.0.0.1:6006 -L 127.0.0.1:8158:127.0.0.1:8888 elmo-vm"
alias ssl-elmo2="ssh -L 127.0.0.1:6006:127.0.0.1:6006 -L 127.0.0.1:8158:127.0.0.1:8888 elmo-vm2"


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# vetology
alias fix-jupyter-kernel="python -m ipykernel install --user --name vetology --display-name \"Python3.6 (vetology)\""
alias jupyter-server="jupyter notebook --port:8899"
alias ssl-vetology="ssh -L 127.0.0.1:8000:127.0.0.1:8899 vetology-gpu"
alias mount-gpudata="sshfs spencer@192.168.149.95:/home/spencer/ /Users/spencer/proj/upwork/vetology_root/server_data"
# local laptop localhost:6006 to see the tensorboard
alias ssltf-vetology="ssh -L 127.0.0.1:6006:127.0.0.1:6006 -L 127.0.0.1:8158:127.0.0.1:8888 vetology-gpu"
alias vtest="PYTHONPATH=./radiograph_classifier/ai LOAD_AIMODELS=0 pytest"
alias jupyter-remote="jupyter notebook --no-browser --ip=192.168.86.32"

add-jupyter-kernel() {

    "python -m ipykernel install --user --name $1 --display-name \"Python3.6 ($1)\""
}

# innobot
dex() {
    docker exec -it "$1" bash
}
# innobot
export DEPLOYMENT_ENV=LOCAL
export VOLUMES_ROOT=.
export NOVA_DATA_DIR=.
export BACK_UP_VOLUMES_ROOT=./dbbackups
alias dps="docker ps"
alias dup="LOGGING_SERVER=localhost DEPLOYMENT_ENV=LOCAL docker-compose -f docker-compose-local.yml up"
alias re-ttrest="docker-compose -f docker-compose-local.yml build --no-cache && docker-compose -f docker-compose-local.yml up"
alias re-ttui="CMS_UI_ENTRY=admintest docker-compose -f docker-compose.yml build --no-cache && CMS_UI_ENTRY=admintest docker-compose -f docker-compose.yml up"
alias ttui="CMS_UI_ENTRY=admintest docker-compose -f docker-compose.yml up"
alias vca-db="VOLUMES_ROOT=. BACK_UP_VOLUMES_ROOT=./dbbackups docker-compose -f db-docker-compose-local.yml up"
alias vca-nova="NOVA_DATA_DIR=. VOLUMES_ROOT=. BACK_UP_VOLUMES_ROOT=./dbbackups docker-compose -f nova-docker-compose-local.yml up"
alias vca-ta="NOVA_DATA_DIR=. docker-compose -f ta-docker-compose-local.yml up"
alias demo-mock="cp /home/spencer/proj/Nordea/mocks/demoenv.ts /home/spencer/proj/Nordea/nova/demoUI/src/environments/environment.LOCAL.ts"
# alias vca-mock="cp /home/spencer/proj/Nordea/mocks/mockapi_reserService.py mbMockServer/mockapi/services/restService.py"
alias tt-mock="cp /home/spencer/proj/Nordea/mocks/ttcms-docker-compose-local.yml /home/spencer/proj/Nordea/vca_teaching_tool_rest/docker-compose-local.yml &&  cp /home/spencer/proj/Nordea/mocks/application-LOCAL.properties /home/spencer/proj/Nordea/vca_teaching_tool_rest/src/main/resources/application-LOCAL.properties"

alias rebotserver="docker-compose -f nova-docker-compose-local.yml build botServer && docker-compose -f nova-docker-compose-local.yml up"

export LOCAL_IP="192.168.86.25"
export LOGGING_SERVER="192.168.86.25"
# export LOCAL_IP="192.168.88.251"
# export LOGGING_SERVER="192.168.88.251"
alias ttlocal="cp /home/spencer/proj/Nordea/mocks/application-LOCAL.properties /home/spencer/proj/Nordea/vca_teaching_tool_rest/src/main/resources/application-LOCAL.properties && cp /home/spencer/proj/Nordea/mocks/ttcms-docker-compose-local.yml /home/spencer/proj/Nordea/vca_teaching_tool_rest/docker-compose-local.yml && cp /home/spencer/proj/Nordea/mocks/environment.local.ts /home/spencer/proj/Nordea/teaching-tool-ui/src/environments/environment.local.ts"
alias ttrestbuild="docker-compose -f docker-compose-local.yml build --no-cache"
alias tt-restore="mysql-restore /home/spencer/proj/Nordea/vca_teaching_tool_rest/backupFiles db_backup_20200302071204.gz"

# JAVA
export JAVA_HOME="/home/spencer/apps/OpenJDK11U-jdk_x64_linux_hotspot_11.0.7_10/jdk-11.0.7+10"
export PATH=$PATH:$JAVA_HOME/bin

# xps 7590 ubuntu
export EDP="eDP-1-1"
alias aedron-vpn="sudo openvpn --config ~/.ssh/tunnelblick_teng_cred.ovpn"
alias reload-acpid="sudo acpid reload"

# for QT-based app such as Zoom
export QT_SCALE_FACTOR=2
alias edit-zoomapp="sudo vim /usr/share/applications/Zoom.desktop"
export PATH="$PATH:/opt/mssql-tools/bin"

# vnc server for remote gui at port 5901
alias start-vnc="vncserver -localhost no -xdisplaydefaults -depth 24"
alias stop-vnc="vncserver -kill :1"

# launch intellij 2019.1 fronzen version
alias run_intellij="~/apps/ideaIU-2019.1.4/idea-IU-191.8026.42/bin/idea.sh"
alias run_pycharm="~/apps/pycharm-professional-2019.1.4/pycharm-2019.1.4/bin/pycharm.sh"
alias ptt="ssh bbsu@ptt.cc"

# jenkins
export_jenkins() {
        username=$1
        password=$2
        host=$3
        port=$4

        JENKINS_HOST=$username:$password@$host:$port
        output=$5

        curl -sSL "http://$JENKINS_HOST/pluginManager/api/xml?depth=1&xpath=/*/*/shortName|/*/*/version&wrapper=plugins" | perl -pe 's/.*?<shortName>([\w-]+).*?<version>([^<]+)()(<\/\w+>)+/\1 \2\n/g'|sed 's/ /:/' >> $output

}

build-push() {
  docker-compose -f docker-compose-base.yml build && ./deploy.sh push && git push
}
delete_docker_images() {
    repository=$1
    docker image rm -f $(docker image ls $repository -q)
}
alias run_gpu='docker run --runtime nvidia -it -v /home/spencer/proj/vetai:/code vetology-gpu bash'

# ngrok
# ngrok port
ngrok-custom() {
  ~/apps/ngrok http $1
}

# check crontab
checkcron="ps -ef | grep cron | grep -v grep"

export COMPOSE_HTTP_TIMEOUT=600

alias test-control="curl -X POST -F 'image=@/home/spencer/proj/elmo-ai/tests/data/image.png' http://localhost:5000/v1.0/control_detection/"
alias test-text="curl -X POST -F 'image=@/home/spencer/proj/elmo-ai/tests/data/image.png' http://localhost:5000/v1.0/text_detection/"
alias test-text2="curl -X POST -F 'image=@/home/spencer/proj/elmo-ai/tests/data/image.png' -F 'annotation=@/home/spencer/proj/elmo-ai/tests/data/image.json' http://localhost:5000/v1.0/text_detection/"

alias attach-webcam="VBoxManage controlvm "Windows 10" webcam attach /dev/video0"


# k8s
k8s-proxy() {
  # to be able to access dashboard with ip:8001
  kubectl proxy --address='0.0.0.0' --disable-filter=true
}

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

